fan:
  - platform: template
    name: ${property}
    id: ${property}
    speed_count: 3
    restore_mode: NO_RESTORE
    on_speed_set:
      - lambda: |-
          const auto fan_speed = std::min(3, x);
          sendData(Kessel, Property::k${property}, fan_speed);
    on_turn_off:
      - lambda: |-
          ESP_LOGI("fan", "Fan Turned Off!");
          sendData(Kessel, Property::k${property}, 0U);
    on_turn_on:
      - logger.log: "Fan Turned On!"

esphome:
  on_boot:
    priority: -100
    then:
      - lambda: |-
          CallbackHandler::instance().addCallback(std::make_pair(Kessel,Property::k${property}),[](const SimpleVariant& value){
              const auto fan_speed = std::min(static_cast<std::uint16_t>(3U),static_cast<std::uint16_t>(value));
              if(fan_speed == 0) {
                id(${property}).turn_off().perform();
              } else {
                // only speeds between 1 and speed_count are allowed
                id(${property}).make_call().set_speed(fan_speed).perform();
                // do not change the order, otherwise fan will be set to 100% the first time
                id(${property}).turn_on().perform();
              }
          });
          queueRequest(Kessel, Property::k${property});
